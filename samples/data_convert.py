import json
import os

def convert_to_coco_format(ref_path, pred_path, out_dir):
    with open(ref_path, "r") as f:
        ref_file = json.load(f)
    with open(pred_path, "r") as f:
        pred_file = json.load(f)

    os.makedirs(out_dir, exist_ok=True)
    out_ref_file = os.path.join(out_dir, "captions_val_gt_coco.json")
    out_pred_file = os.path.join(out_dir, "captions_val_pred_coco.json")

    annotations = []
    images = []
    predictions = []

    ann_id = 0
    for img_id_str, ref_captions in ref_file.items():
        img_id = int(img_id_str)
        images.append({ "id": img_id })

        for caption in ref_captions:
            annotations.append({
                "image_id": img_id,
                "id": ann_id,
                "caption": caption.strip()
            })
            ann_id += 1

    for img_id_str, pred_caption in pred_file.items():
        img_id = int(img_id_str)
        predictions.append({
            "image_id": img_id,
            "caption": pred_caption.strip()
        })

    with open(out_ref_file, "w") as f:
        json.dump({
            "type": "captions",
            "info": {
                "description": "Generated by Mercury's caption conversion tool"
            },
            "licenses" : [],
            "images": images,
            "annotations": annotations
        }, f, indent=2)

    with open(out_pred_file, "w") as f:
        json.dump(predictions, f, indent=2)

    print("âœ… COCO-format files created:")
    print(f" - References:  {out_ref_file}")
    print(f" - Predictions: {out_pred_file}")

if __name__ == "__main__" :
    import os

    ref_path = os.path.expanduser("~/NSERC/samples/may22_samples/sampled_captions.json")
    pred_path = os.path.expanduser("~/NSERC/samples/may22_samples/answered_captions.json")
    # pred_path = os.path.expanduser("~/NSERC/samples/may22_samples/guided_answered_captions.json")
    out_dir = os.path.expanduser("~/NSERC/samples/may22_samples/coco_json_format")

    convert_to_coco_format(ref_path, pred_path, out_dir)